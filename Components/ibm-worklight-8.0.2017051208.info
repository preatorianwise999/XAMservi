{"Name":"IBM MobileFirst SDK","Id":3505,"Alias":"ibm-worklight","Description":"## IBM MobileFirst SDK\n\nWith the IBM MobileFirst Platform Foundation SDK, C# developers can build rich native enterprise grade mobile apps for iOS and Android devices by using IBM MobileFirst Platform Server.\n\n*Note:  IBM MobileFirst Platform Foundation was earlier called IBM Worklight Foundation.*\n\n#### Key Highlights\n* **Do it all by using C#**\n* Single, secure point of integration, management, and deployment that supports the full mobile app lifecycle\n* Access your enterprise backend using MobileFirst Platform Adapters\n* Enterprise grade security for your mobile applications\n* Application management and version control\n* Leverage rich analytics support of MobileFirst Platform\n* Simplified push notification management service\n* Possibility to use your own strongly-typed C# objects and async/await patterns.\n* A unified C#API for iOS and Android.\n\n###Dive In\n\nA unified API is provided for iOS and Android. You can write most of the IBM MobileFirst Platform related code in a common shared project that will be used in both the Android project and the iOS project. You can write all the asynchronous code using async/await and event listeners to make your app responsive.\n\nThe following code is a simplified subset of the code that is located in the samples. This example show how you can call an IBM MobileFirst adapter that returns a feed of news articles and is formatted for pretty printing in platform agnostic code.\n\nIn the Android Activity, instantiate the Android specific     WorklightClient object.\n\n```\n\t\t\n\t\tpublic class MainActivity : Activity\n\t\t{\n\t\t\tIWorklightClient client = Worklight.Xamarin.Android.WorklightClient.CreateInstance (this);\n\t\t}\n\t\n```\n\nIn the iOS UIViewController instantiate the iOS specific WorklightClient\n\n```\n\t\n\tpublic partial class Xtest_iOSViewController : UIViewController\n\t{\n\t\tpublic override void ViewDidLoad ()\n\t\t{\n\t\t\tbase.ViewDidLoad ();\n\t\t\tIWorklightClient client =  Worklight.Xamarin.iOS.WorklightClient.CreateInstance ();\n\t\t}\n\t}\n\t\n```\n\nAfter you created the instance of IWorklightClient, you can use it to write platform agnostic common code. You first connect to the MobileFirst Server, and register a Challenge handler for authentication. As you do so, you can write to the local logging as well as the server-based analytics logging.\n\n```\n\n\t\t//all this is common code\n\t\tpublic async Task\u003cWorklightResponse\u003e Connect()\r\n \t\t{\n \t\t\tstring appRealm = \"SampleAppRealm\";\n\t\t\tChallengeHandler customCH = new CustomChallengeHandler (appRealm);\n\t\t\tclient.RegisterChallengeHandler(customCH);\n\t\t\tWorklightResponse task = await client.Connect ();\n\t\t\t//lets log to the local client (not server)\n\t\t\tclient.Logger(\"Xamarin\").Trace (\"connection\");\n\t\t\t//write to the server the connection status\n\t\t\tclient.Analytics.Log (\"Connect response : \" + task.Success);\n\t\t\treturn task;\n\t\t}\n\n```\n\nThen call an adapter procedure\n\n```\n\t\t\n\t\t//Common code\n\t\tStringBuilder uriBuilder = new StringBuilder()\n\t\t\t\t\t.Append(\"/adapters\")\n\t\t\t\t\t.Append(\"/ResourceAdapter\") //Name of the adapter\n\t\t\t\t\t.Append(\"/balance\");    // Name of the adapter procedure\n\n\t\tWorklightResourceRequest rr = client.ResourceRequest(new Uri(uriBuilder.ToString(),UriKind.Relative,\n\t\t\t\"GET\",\n\t\t\t\"accessRestricted\");\n\n\t\tWorklightResponse resp = await rr.Send();\n\n\t\tresult.Success = resp.Success;\n\t\tresult.Response = resp.Success ? \"Your account balance is \" + resp.ResponseText : resp.Message; \n\n```\n\nFor more information see the sample inside the component for more details. \n\n","Version":"8.0.2017051208","Summary":"Integrate your Xamarin apps with IBM MobileFirst Platform.","QuickStart":"## More Information\n\n1. [IBM MobileFirst Platform Foundation home page](http://mobilefirstplatform.ibmcloud.com)\r\n2. [IBM MobileFirst Platform Foundation Knowledge Center](https://www.ibm.com/support/knowledgecenter/SSHS8R_8.0.0/wl_welcome.html)\r\n3.  The C# API guide is bundled inside the component\r\n4.  The sample Xamarin solution for Android and iOS is bundled in the component\r\n\n## Pre-requisites for a New Solution\n\n 1.  You need an instance of the IBM MobileFirst Server on the development machine or an instance of MobileFirst Foundation on IBM Bluemix.  Install MobileFirst CLI (Command line Interface) from the [ IBM Worklight download page](https://mobilefirstplatform.ibmcloud.com/downloads/)\n 2.  Create a Xamarin Solution\n 3.  Add a Android and/or iOS project in the solution\n 4.  Add this component to the project \r\n 5. The MobileFirst SDK needs a property file that contains information on how to connect to the Worklight Server. This information is pre-populated with some data (like the IP address of the server, application name etc) in the Worklight project the add-in created. Add it to the Xamarin Application projects.\r\n  1. Android: Add the \u003c Solution folder\u003e\\worklight\\\u003c SolutionName\u003e\\apps\\android\u003c SolutionName\u003e\\mfpclient.properties file to the Xamarin Android **Assets** folder and set the build action to **AndroidAsset**. (e.g: \\Xtest\\worklight\\Xtest\\apps\\androidXtest\\mfpclient.properties)\r\n  2. iOS: Add the \u003c Solution folder\u003e\\worklight\\\u003c SolutionName\u003e\\apps\\iOS\u003c SolutionName\u003e\\worklight.plist file to the Xamarin iOS **resources** folder and set the build action to **bundleResource** (e.g: \\Xtest\\worklight\\Xtest\\apps\\iOSXtest\\mfpclient.plist)\r\n 8. To use the JSONStore API, Worklight SDK needs some native files. These need to be added to the project.\n   1. Android: Add to the **Assets** folder the files from \u003c Solution folder\u003e\\worklight\\\u003c SolutionName\u003e\\apps\\android\u003c SolutionName\u003e/jsonstore/assets . Set the **BuildAction** for these files to **AndroidAsset**.\r\n   1. iOS: No action needed.\n\n**Note:** \n\nWhen you add the Worklight Xamarin Component to your project, the following DLLs get referenced in the project\n\n1. Android:   \n   * MobileFirst.Xamarin.Android.dll\n   * Worklight.Android.dll\n   * MobileFirst.Android.JSONStore.dll\n   * MobileFirst.Android.Push\n2.  iOS :  \n   * MobileFirst.Xamarin.iOS.dll\n   * Worklight.iOS.dll\n   * MobileFirst.iOS.JSONStore.dll\n   * MobileFirst.iOS.Push\n\n## Sample Application Quickstart\n\n###Pre-requisites\n \r\n\r\n1.  You need a instance of the Worklight Server on the development machine.  Install Worklight CLI (Command line Interface) from the [ IBM Worklight download page](http://www.ibm.com/developerworks/mobile/worklight/download/cli.html)\r\n\r\n###Open the samples in Xamarin Studio:\r\n\r\n1. Open Xamarin Studio.\r\n2. Create a new Solution and add a project to it\r\n3. Add this component from the component store\r\n4. Double-click on the IBM MobileFirst Component\r\n5. Navigate to the **Samples** tab\r\n3. Open the sample\r\n\r\n###Prepare the MobileFirst Server\r\n\r\n1.  From the add-in - click on **Start Server** - 1. this command might take some time the first time you run it.\r\n2.  Click on **Open Console** and log into the console, by using the following credentials: username =  admin, and password =  admin\r\n3.  You now see two apps and a SampleHTTPAdapter in the console\r\n4.  Run the app in the simulator/real device\n\n\n###Configure and run the iOS Sample\n\n1. Right-click the **WorklightSample.iOS** project and select **Set As Startup Project**\n2. Expand the **Worklightsample.iOS** project and double-click the file **worklight.plist** to open it in the property value editor.\n3. In the property value editor find the entry for \"host\" and update its value to the \"Server host\" value.\n4. Run the sample project by clicking Xamarin menu **Run \u003e Start Debugging**\r\n\r\n###Using JSONStore in the Android Sample\r\n 1. To use the JSONStore API, Worklight SDK needs some native files. These need to be added to the project.\r\n   1. Android: Copy the files under \u003c Solution folder\u003e\\worklight\\\u003c SolutionName\u003e\\apps\\android\u003c SolutionName\u003e/jsonstore/assets to the **Assets** folder. Set the **BuildAction** for these files to **AndroidAsset**.\r\n   1. iOS: No action needed.\r\n\r\n##Additional Info\n\n###Appendix I\n\nTo setup a Xamarin development environment with MobileFirst Foundation IBM Bluemix.\n\n 1. Login to [bluemix.net](https://bluemix.net) and create an instance of [MobileFirst Foundation service](https://console.ng.bluemix.net/catalog/services/mobile-foundation/).\n 2. Go through the wizard to start your server\n 3. Create a new application. Select the environment and accordingly provide the bundle if of your app (iOS) or package name of your app (Android).\n 4. If your application requires any adapters, build and deploy the adapters from the console.\n\n### Appendix II\nDocumentation Links\n\n1. [IBM MobileFirst Knowledge Center](https://www.ibm.com/support/knowledgecenter/SSHS8R_8.0.0/wl_welcome.html)\n2. [IBM MobileFirst Developer Center] (http://mobilefirstplatform.ibmcloud.com)\n3. [IBM MobileFirst Command Line Interface Reference](https://www.ibm.com/support/knowledgecenter/SSHS8R_8.0.0/com.ibm.worklight.admin.doc/admin/c_administering_ibm_worklight_applications_through_command_line.html)","Hash":"3f222ed6e3da78296af300dc90aadc30","TargetPlatforms":["ios","ios-unified","android"],"TrialHash":null}